resources:

- name: config
  type: git
  source:
    username: ((configuration.username))
    password: ((configuration.password))
    uri: ((configuration.uri))
    branch: master

# - name: installation
#   type: s3
#   source:
#     access_key_id: ((s3.access_key_id))
#     bucket: ((s3.buckets.installation))
#     region_name: ((s3.region_name))
#     secret_access_key: ((s3.secret_access_key))
#     versioned_file: installation.zip

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-healthwatch-(.*).pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: healthwatch-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: scheduler-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-scheduler-(.*).pivotal

- name: scheduler-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-scheduler-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: pcf-metrics-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-(.*).pivotal

- name: pcf-metrics-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: credhub-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: credhub-service-broker-(.*).pivotal

- name: credhub-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-credhub-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: mysql-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-mysql-(.*).pivotal

- name: mysql-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-mysql-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: rabbitmq-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-rabbitmq-(.*).pivotal

- name: rabbitmq-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-rabbitmq-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: redis-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-redis-(.*).pivotal

- name: redis-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-redis-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: spring-cloud-services-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-spring-cloud-services-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: spring-cloud-services-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-spring-cloud-services-(.*).pivotal

- name: a9s-mongodb-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: a9s-mongodb-(.*).pivotal

- name: a9s-mongodb-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: a9s-mongodb-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz
#
# - name: one-time-trigger
#   type: time
#   source:
#     interval: 999999h
#
# - name: daily-trigger
#   type: time
#   source:
#     interval: 24h

groups:
- name: pas
  jobs:
  - upload-healthwatch-stemcell
  - upload-and-stage-healthwatch
  - configure-healthwatch
  - upload-pcf-metrics-stemcell
  - upload-and-stage-pcf-metrics
  - configure-pcf-metrics
- name: marketplace
  jobs:
  - upload-mysql-stemcell
  - upload-and-stage-mysql
  - configure-mysql
  - upload-rabbitmq-stemcell
  - upload-and-stage-rabbitmq
  - configure-rabbitmq
  - upload-redis-stemcell
  - upload-and-stage-redis
  - configure-redis
  - upload-spring-cloud-services-stemcell
  - upload-and-stage-spring-cloud-services
  - configure-spring-cloud-services
  - upload-credhub-stemcell
  - upload-and-stage-credhub
  - configure-credhub
  - upload-scheduler-stemcell
  - upload-and-stage-scheduler
  - configure-scheduler
  - upload-mongodb-stemcell
  - upload-and-stage-mongodb
  - configure-mongodb
- name: complete
  jobs:
  - apply-product-changes

jobs:
- name: upload-healthwatch-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: healthwatch-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-healthwatch-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: healthwatch-stemcell

- name: upload-and-stage-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: healthwatch-product
    - get: config
      passed:
      - upload-healthwatch-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: healthwatch-product

- name: configure-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-healthwatch
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/p-healthwatch/configuration.yml
      VARS_FILES: vars/common.yml vars/healthwatch.yml

- name: upload-pcf-metrics-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pcf-metrics-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-pcf-metrics-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pcf-metrics-stemcell

- name: upload-and-stage-pcf-metrics
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pcf-metrics-product
    - get: config
      passed:
      - upload-pcf-metrics-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: pcf-metrics-product

- name: configure-pcf-metrics
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-pcf-metrics
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-pcf-metrics
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/apm/configuration.yml
      VARS_FILES: vars/common.yml vars/pcf-metrics.yml

- name: upload-mysql-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: mysql-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-mysql-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: mysql-stemcell

- name: upload-and-stage-mysql
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: mysql-product
    - get: config
      passed:
      - upload-mysql-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: mysql-product

- name: configure-mysql
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-mysql
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-mysql
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/pivotal-mysql/configuration.yml
      VARS_FILES: vars/common.yml vars/mysql.yml
  - task: generate-services-ca-cert
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
    config:
      run:
        path: bash
        args:
          - -c
          - |
            IDENTITY="$(om --env env/env.yml curl --path /api/v0/deployed/director/credentials/uaa_admin_user_credentials 2> /dev/null | grep identity | awk -F: '{ print $2 ; }' | tr -d \" | tr -d \, | tr -d \ )"
            SECRET="$(om --env env/env.yml curl --path /api/v0/deployed/director/credentials/uaa_admin_user_credentials 2> /dev/null | grep password | awk -F: '{ print $2 ; }' | tr -d \" | tr -d \, | tr -d \ )"
            eval "$(om --env env/env.yml curl --path /api/v0/deployed/director/credentials/bosh_commandline_credentials 2> /dev/null | grep credential | awk -F: '{ print $2 ; }' | tr -d \" | awk -F\  '{ print $4; }')"
            echo "${OPSMAN_PRIVATE_KEY}" >> private_key.pem
            export CREDHUB_PROXY=ssh+socks5://ubuntu@((opsman.host)):22?private-key=private_key.pem
            credhub api https://${BOSH_ENVIRONMENT}:8844 --skip-tls-validation
            credhub login --username="${IDENTITY}" --password="${SECRET}"
            credhub generate --name="/services/tls_ca" \
              --type="certificate" \
              --no-overwrite \
              --is-ca \
              --common-name="rootCA"
      inputs:
      - name: config
      - name: env
      outputs:
      - name: files
      platform: linux
    params:
      OPSMAN_PRIVATE_KEY: ((opsman_private_key))

- name: upload-rabbitmq-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: rabbitmq-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-rabbitmq-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: rabbitmq-stemcell

- name: upload-and-stage-rabbitmq
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: rabbitmq-product
    - get: config
      passed:
      - upload-rabbitmq-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: rabbitmq-product

- name: configure-rabbitmq
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-rabbitmq
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-rabbitmq
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/p-rabbitmq/configuration.yml
      VARS_FILES: vars/common.yml vars/rabbitmq.yml

- name: upload-redis-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: redis-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-redis-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: redis-stemcell

- name: upload-and-stage-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: redis-product
    - get: config
      passed:
      - upload-redis-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: redis-product

- name: configure-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-redis
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-redis
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/p-redis/configuration.yml
      VARS_FILES: vars/common.yml vars/redis.yml

- name: upload-spring-cloud-services-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: spring-cloud-services-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-spring-cloud-services-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: spring-cloud-services-stemcell

- name: upload-and-stage-spring-cloud-services
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: spring-cloud-services-product
    - get: config
      passed:
      - upload-spring-cloud-services-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: spring-cloud-services-product

- name: configure-spring-cloud-services
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-spring-cloud-services
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-spring-cloud-services
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/p-spring-cloud-services/configuration.yml
      VARS_FILES: vars/common.yml vars/spring-cloud-services.yml

- name: upload-credhub-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: credhub-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-credhub-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: credhub-stemcell

- name: upload-and-stage-credhub
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: credhub-product
    - get: config
      passed:
      - upload-credhub-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: credhub-product

- name: configure-credhub
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-credhub
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-credhub
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/credhub-service-broker/configuration.yml
      VARS_FILES: vars/common.yml vars/credhub-broker.yml

- name: upload-scheduler-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: scheduler-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-scheduler-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: scheduler-stemcell

- name: upload-and-stage-scheduler
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: scheduler-product
    - get: config
      passed:
      - upload-scheduler-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: scheduler-product

- name: configure-scheduler
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-scheduler
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-scheduler
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/p-scheduler/configuration.yml
      VARS_FILES: vars/common.yml vars/scheduler.yml

- name: upload-mongodb-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: a9s-mongodb-stemcell
      trigger: true
    - get: config
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-mongodb-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: a9s-mongodb-stemcell

- name: upload-and-stage-mongodb
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: a9s-mongodb-product
    - get: config
      passed:
      - upload-mongodb-stemcell
      trigger: true
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate-environment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: upload-and-stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      env: interpolated-files
      product: a9s-mongodb-product

- name: configure-mongodb
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - upload-and-stage-mongodb
      trigger: true
  - task: foundation-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            cp config/foundations/((cloud))/((environment))/*.yml files/ ;
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: configure-mongodb
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/a9s-mongodb/configuration.yml
      VARS_FILES: vars/common.yml vars/mongodb.yml


- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
      passed:
      - configure-healthwatch
      - configure-pcf-metrics
      - configure-mysql
      - configure-rabbitmq
      - configure-redis
      - configure-spring-cloud-services
      - configure-credhub
      - configure-scheduler
      - configure-mongodb
      trigger: false
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - |
            om interpolate --config config/templates/environment/env.yml --vars-file config/foundations/((cloud))/((environment))/common.yml \
              > files/env.yml
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: env.yml
