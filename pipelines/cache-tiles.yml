resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: config
  type: git
  source:
    username: ((configuration.username))
    password: ((configuration.password))
    uri: ((configuration.uri))
    branch: master

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-healthwatch-(.*).pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: healthwatch-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: compliance-monitor-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: scanner-(.*).pivotal

- name: compliance-monitor-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: compliance-monitor-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: scheduler-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-scheduler-(.*).pivotal

- name: scheduler-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-scheduler-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: pcf-metrics-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-(.*).pivotal

- name: pcf-metrics-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: credhub-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: credhub-service-broker-(.*).pivotal

- name: credhub-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-credhub-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 1\.(.*) # pin to major version 1
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: mysql-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-mysql-(.*).pivotal

- name: mysql-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-mysql-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: rabbitmq-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-rabbitmq-(.*).pivotal

- name: rabbitmq-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-rabbitmq-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: redis-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-redis-(.*).pivotal

- name: redis-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-redis-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: spring-cloud-services-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-spring-cloud-services-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz

- name: spring-cloud-services-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-spring-cloud-services-(.*).pivotal

- name: a9s-mongodb-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: a9s-mongodb-(.*).pivotal

- name: a9s-mongodb-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: a9s-mongodb-stemcell/light-bosh-stemcell-(.*)-((iaas)).*\.tgz


groups:
- name: automation
  jobs:
  - fetch-platform-automation
- name: pas
  jobs:
  - fetch-healthwatch
  - fetch-compliance-monitor
  - fetch-pcf-metrics
- name: marketplace
  jobs:
  - fetch-mysql
  - fetch-rabbitmq
  - fetch-redis
  - fetch-spring-cloud-services
  - fetch-a9s-mongodb
  - fetch-scheduler
  - fetch-credhub

jobs:
- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: fetch-healthwatch
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((healthwatch.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/healthwatch.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: fetch-compliance-monitor
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-compliance-monitor-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((compliance-monitor.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/compliance-monitor.yml
    output_mapping: {downloaded-stemcell: compliance-monitor-stemcell}
  - aggregate:
    - put: compliance-monitor-product
      params:
        file: downloaded-product/*.pivotal
    - put: compliance-monitor-stemcell
      params:
        file: compliance-monitor-stemcell/*.tgz

- name: fetch-pcf-metrics
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-pcf-metrics-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((metrics.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/pcf-metrics.yml
    output_mapping:
      downloaded-stemcell: pcf-metrics-stemcell
  - aggregate:
    - put: pcf-metrics-product
      params:
        file: downloaded-product/*.pivotal
    - put: pcf-metrics-stemcell
      params:
        file: pcf-metrics-stemcell/*.tgz

- name: fetch-mysql
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-mysql-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((mysql.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/mysql.yml
    output_mapping: {downloaded-stemcell: mysql-stemcell}
  - aggregate:
    - put: mysql-product
      params:
        file: downloaded-product/*.pivotal
    - put: mysql-stemcell
      params:
        file: mysql-stemcell/*.tgz

- name: fetch-rabbitmq
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-rabbitmq-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((rabbitmq.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/rabbitmq.yml
    output_mapping: {downloaded-stemcell: rabbitmq-stemcell}
  - aggregate:
    - put: rabbitmq-product
      params:
        file: downloaded-product/*.pivotal
    - put: rabbitmq-stemcell
      params:
        file: rabbitmq-stemcell/*.tgz

- name: fetch-redis
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-redis-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((redis.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/redis.yml
    output_mapping: {downloaded-stemcell: redis-stemcell}
  - aggregate:
    - put: redis-product
      params:
        file: downloaded-product/*.pivotal
    - put: redis-stemcell
      params:
        file: redis-stemcell/*.tgz

- name: fetch-spring-cloud-services
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-spring-cloud-services-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((spring-cloud-services.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/spring-cloud-services.yml
    output_mapping: {downloaded-stemcell: spring-cloud-services-stemcell}
  - aggregate:
    - put: spring-cloud-services-product
      params:
        file: downloaded-product/*.pivotal
    - put: spring-cloud-services-stemcell
      params:
        file: spring-cloud-services-stemcell/*.tgz

- name: fetch-a9s-mongodb
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-a9s-mongodb-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((mongodb.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/mongodb.yml
    output_mapping: {downloaded-stemcell: a9s-mongodb-stemcell}
  # TODO: update the tile metatdata to make the backup S3 properties configurable
  - task: adjust-tile-properties
    config:
      image_resource:
        type: docker-image
        source:
          repository: czero/cflinuxfs2
      run:
        path: bash
        args:
          - -c
          - |
            mkdir metadata
            unzip -p downloaded-product/*.pivotal metadata/metadata.yml \
              | yaml-patch -o config/etc/a9s-mongodb-metadata-patch.yml > metadata/metadata.yml
            zip -u downloaded-product/*.pivotal metadata/metadata.yml
            mv downloaded-product/*.pivotal updated-tile/
      inputs:
      - name: config
      - name: downloaded-product
      outputs:
      - name: updated-tile
      platform: linux
  - aggregate:
    - put: a9s-mongodb-product
      params:
        file: updated-tile/*.pivotal
    - put: a9s-mongodb-stemcell
      params:
        file: a9s-mongodb-stemcell/*.tgz

- name: fetch-scheduler
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-scheduler-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((scheduler.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/scheduler.yml
    output_mapping: {downloaded-stemcell: scheduler-stemcell}
  - aggregate:
    - put: scheduler-product
      params:
        file: downloaded-product/*.pivotal
    - put: scheduler-stemcell
      params:
        file: scheduler-stemcell/*.tgz

- name: fetch-credhub
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: config
  - task: environment-files
    image: platform-automation-image
    config:
      run:
        path: bash
        args:
          - -c
          - cp config/foundations/((cloud))/((environment))/*.yml files/
      inputs:
      - name: config
      outputs:
      - name: files
      platform: linux
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub_client.username))
      CREDHUB_SECRET: ((credhub_client.password))
      CREDHUB_SERVER: ((credhub.server))
      PREFIX: /pipelines/((cloud))/((environment))
  - task: download-credhub-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      vars: interpolated-files
    params:
      CONFIG_FILE: templates/((credhub-broker.product_slug))/download.yml
      VARS_FILES: vars/common.yml vars/credhub-broker.yml
    output_mapping: {downloaded-stemcell: credhub-stemcell}
  - aggregate:
    - put: credhub-product
      params:
        file: downloaded-product/*.pivotal
    - put: credhub-stemcell
      params:
        file: credhub-stemcell/*.tgz
